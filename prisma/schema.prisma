generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int          @id @default(autoincrement())
  email             String       @unique
  password          String
  region            Region_w_co
  role              Role
  iis_token         String?
  crs_token         String?
  created           DateTime     @default(now())
  updated           DateTime     @default(now())
  isDetailsComplete Boolean      @default(false)
  sessions          Session[]
  userDetails       UserDetails?
  establishmentCreated Establishment[] @relation("CreatedEstablishment")
  establishmentUpdated Establishment[] @relation("UpdatedEstablishment")
  laboratories Laboratory[] @relation("createdLabs")
  updatedLabs Laboratory[] @relation("updatedLabs")
  uploadedLabAttachments LaboratoryAttachments[] @relation("UploadedLabAttachments")
  assignedApplications ELRApplication[] @relation("assignedApplications")
  custodianApplication ELRApplication[] @relation("custodianApplications")
  nonComplianceReportHandled NonComplianceReport[] @relation("NonComplianceReportHandler")
  nonComplianceReportCreated NonComplianceReport[] @relation("NonComplianceReportCreated")
  recommendationReportHandled RecommendationReport[] @relation("RecommendationReportReportHandler")
  recommendationReportCreated RecommendationReport[] @relation("RecommendationReportCreated")
  checklists Checklist[]
  elrApplications ELRApplication[] @relation("ELRApplications")
  liatChaired AssessmentTeam[] @relation("LIATChaired")
  liatChairedCO AssessmentTeam[] @relation("LIATMemberedCO")
  liatChairedRO AssessmentTeam[] @relation("LIATMemberedRO")
  extAssessorMgmt AssessmentTeam[] @relation("ExtAssessorMgmt")
  extAssessorPl AssessmentTeam[] @relation("ExtAssessorPl")
  remarks Remark[]
}

model UserDetails {
  id             Int     @id @default(autoincrement())
  userId         Int     @unique
  firstName      String?
  lastName       String?
  address        String?
  contactNumber  String?
  profilePicture String?
  signature      String?
  qrCode         String?
  companyName    String?
  companyJobTitle    String?
  companyContact    String?
  companyAddress    String?
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Session {
  id        String   @id
  userId    Int
  expiresAt DateTime
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model Attachment {
  id         Int    @id @default(autoincrement())
  file_path  String
  url_path   String
  file_label String
  file_type String @default("other")
  accreditation_records AccreditationRecord[]
  personnelCV Personnel[] @relation("PersonnelCV")
  personnelLicense Personnel[] @relation("PersonnelLicense")
  businessPermit Laboratory[] @relation("businessPermit")
  laboratoryAttachments LaboratoryAttachments[]
}



// ======================================= Laboratory Models =======================================

model AccreditationRecord {
  id Int @id @default(autoincrement())
  accreditation_body String
  scope String
  expiration DateTime
  certificateId Int
  certificate Attachment @relation(fields: [certificateId], references: [id], onDelete: Cascade)
  laboratoryId Int
  laboratory Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
}


model Personnel {
  id Int @id @default(autoincrement())
  name String
  position String
  education String
  yearsOfExperience Int
  cvId Int @unique
  cv Attachment @relation("PersonnelCV", fields: [cvId], references: [id], onDelete: Cascade) 
  licenseId Int? @unique
  license Attachment? @relation("PersonnelLicense", fields: [licenseId], references: [id], onDelete: Cascade)
  laboratoryId Int
  laboratory Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
}


model SampleType {
  id Int @id @default(autoincrement())
  name String
  parameters Parameter[]
  samples Sample[]
}

model Parameter {
  id Int @id @default(autoincrement())
  name String
  sampleTypeId Int
  sampleType SampleType @relation(fields: [sampleTypeId], references: [id])
  sampleMethods SampleMethod[]
  samples Sample[]
}

model SampleMethod {
  id Int @id @default(autoincrement())
  name String
  parameterId Int
  parameter Parameter @relation(fields: [parameterId], references: [id])
  sampleReferences SampleReference[]
  samples Sample[]
}

model SampleReference {
  id Int @id @default(autoincrement())
  name String
  sampleMethodId Int
  sampleMethod SampleMethod @relation(fields: [sampleMethodId], references: [id])
  samples Sample[]
}


model Sample {
  id Int @id @default(autoincrement())
    sampleTypeId Int
    sampleType SampleType @relation(fields: [sampleTypeId], references: [id], onDelete: Cascade)
    parameterId Int
    parameter Parameter @relation(fields: [parameterId], references: [id], onDelete: Cascade)
    sampleMethodId Int?
    sampleMethod SampleMethod? @relation(fields: [sampleMethodId], references: [id], onDelete: Cascade)
    sampleReferenceId Int?
    sampleReference SampleReference? @relation(fields: [sampleReferenceId], references: [id], onDelete: Cascade)
    trackRecords TrackRecord[]
    elrApplications ELRApplication[]
}

model TrackRecord {
  id Int @id @default(autoincrement())
  sampleId Int
  sample Sample @relation(fields: [sampleId], references: [id], onDelete: Cascade)
  numberOfSamples Int
  dateCoveredStart DateTime
  dateCoveredEnd  DateTime
  laboratoryId Int
  laboratory Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
}


model Establishment {
  id Int @id @default(autoincrement())
  region Region
  province String
  address String
  lat Float
  lon Float
  created DateTime @default(now())
  updated DateTime @default(now())
  addedById Int
  addedBy User @relation("CreatedEstablishment", fields: [addedById], references: [id], onDelete: Cascade)
  updatedById Int?
  updatedBy User? @relation("UpdatedEstablishment", fields: [updatedById], references: [id], onDelete: Cascade)
  laboratory Laboratory[]
}


model LaboratoryAttachments {
  id Int @id @default(autoincrement())
  laboratoryId Int
  laboratory Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  attachmentId Int
  attachment Attachment @relation(fields: [attachmentId], references: [id], onDelete: Cascade)
  addedById Int
  addedBy User @relation("UploadedLabAttachments", fields: [addedById], references: [id])
  dateAdded DateTime @default(now())
  file_type String
}

model Laboratory {
  id Int @id @default(autoincrement())
  laboratoryName String
  establishmentId Int
  establishment Establishment @relation(fields: [establishmentId], references: [id], onDelete: Cascade)
  certificationDate DateTime?
  certificationExpiration DateTime?
  labHeadName String?
  labHeadEmail String?
  labHeadContact String?
  labHeadCitizenShip String?
  contactNumber String?
  faxNumber String?
  tin String?
  missionStatement String?
  dateEstablished DateTime
  businessPermitId Int?
  businessPermit Attachment? @relation("businessPermit", fields: [businessPermitId], references: [id], onDelete: Cascade)
  businessPermitNumber String?
  businessPermitIssueDate DateTime?
  businessPermitExpiration DateTime?
  businessPermitPlaceOfIssuance String?
  categoryOfClient Json?
  ServicesOffered Json?
  scopeOfWork String?
  areaServed String?
  accreditationRecords AccreditationRecord[] // Own page
  personnels Personnel[] // Own page
  trackRecords TrackRecord[] // Own page
  labAttachments LaboratoryAttachments[]
  addedById Int
  addedBy User @relation("createdLabs", fields: [addedById], references: [id])
  updateById Int?
  updatedBy User? @relation("updatedLabs", fields: [updateById], references: [id])
  updated DateTime @default(now())
  status Int
  lab_details_complete Boolean @default(false)
  accreditation_record_complete Boolean @default(false)
  personnel_record_complete Boolean @default(false)
  track_record_complete Boolean @default(false)
  required_files_complete Boolean @default(false)
  elr_applications ELRApplication[]
}

enum Region {
  car
  ncr
  r1
  r2
  r3
  r4a
  r4b
  r5
  r6
  r7
  r8
  r9
  r10
  r11
  r12
  r13
}

enum Region_w_co {
  car
  central_office
  ncr
  r1
  r2
  r3
  r4a
  r4b
  r5
  r6
  r7
  r8
  r9
  r10
  r11
  r12
  r13
}

enum Role {
  custodian
  liat_member_co
  liat_member_ro
  elr_secretariat
  elr_coordinator
  external_assessor
  applicant
  admin
  denr_secretary
}


// ======================================= Application Models =======================================

model ELRApplication {
  id Int @id @default(autoincrement())
  laboratoryId Int
  laboratory Laboratory @relation(fields: [laboratoryId], references: [id], onDelete: Cascade)
  assigneeId Int?
  assignee User? @relation("assignedApplications", fields: [assigneeId], references: [id], onDelete: Cascade)
  custodianId Int?
  custodian User? @relation("custodianApplications", fields: [custodianId], references: [id], onDelete: Cascade)
  status Int
  remarks Remark[]
  scope_of_recognition Sample[]
  date_created DateTime @default(now())
  date_updated DateTime @default(now())
  elr_code String?
  onsite_assessment OnSiteAssessment?
  addedById Int
  addedBy User @relation("ELRApplications", fields: [addedById], references: [id], onDelete: Cascade)
}

model OnSiteAssessment {
  id Int @id @default(autoincrement())
  applicationId Int @unique
  application ELRApplication @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  non_compliance_reports NonComplianceReport[]
  recommendations RecommendationReport[]
  checklists Checklist[]
  assessmentTeam AssessmentTeam?
}


model NonComplianceReport {
  id Int @id @default(autoincrement())
  onsiteAssessmentId Int @unique
  onsiteAssessment OnSiteAssessment @relation(fields: [onsiteAssessmentId], references: [id], onDelete: Cascade)
  req_document Json?
  schedule_start DateTime
  schedule_end DateTime
  status Int
  handlerId Int
  handler User @relation("NonComplianceReportHandler", fields: [handlerId], references: [id], onDelete: Cascade)
  addedById Int
  addedBy User @relation("NonComplianceReportCreated", fields: [addedById], references: [id], onDelete: Cascade)
}

model RecommendationReport {
  id Int @id @default(autoincrement())
  onsiteAssessmentId Int @unique
  onsiteAssessment OnSiteAssessment @relation(fields: [onsiteAssessmentId], references: [id], onDelete: Cascade)
  req_document Json?
  schedule_start DateTime
  schedule_end DateTime
  status Int
  handlerId Int
  handler User @relation("RecommendationReportReportHandler", fields: [handlerId], references: [id], onDelete: Cascade)
  addedById Int
  addedBy User @relation("RecommendationReportCreated", fields: [addedById], references: [id], onDelete: Cascade)
}


enum ChecklistType {
  part1
  part2
  part3
  part4a
  part4b
  part4c
  part4d
}

model Checklist {
  id Int @id @default(autoincrement())
  onsiteAssessmentId Int @unique
  onsiteAssessment OnSiteAssessment @relation(fields: [onsiteAssessmentId], references: [id], onDelete: Cascade)
  data Json
  assignees User[]
  is_done Boolean @default(false)
  type ChecklistType
}


model AssessmentTeam {
  id Int @id @default(autoincrement())
  onsiteAssessmentId Int @unique
  onsiteAssessment OnSiteAssessment @relation(fields: [onsiteAssessmentId], references: [id], onDelete: Cascade)
  liat_chairId Int?
  liat_chair User? @relation("LIATChaired", fields: [liat_chairId], references: [id])
  liat_member_co User[] @relation("LIATMemberedCO")
  liat_member_ro User[] @relation("LIATMemberedRO")
  external_assessor_mgmtId Int?
  external_assessor_mgmt User? @relation("ExtAssessorMgmt", fields: [external_assessor_mgmtId], references: [id])
  external_assessor_plId Int?
  external_assessor_pl User? @relation("ExtAssessorPl", fields: [external_assessor_plId], references: [id])
  isApproved Boolean @default(false)
}

model Remark {
  id Int @id @default(autoincrement())
  addedById Int
  addedBy User @relation(fields: [addedById], references: [id], onDelete: Cascade)
  created DateTime @default(now())
  content String
  elrApplicationId Int
  elrApplication ELRApplication @relation(fields: [elrApplicationId], references: [id])
}